Instructions for Replit Assistant: Implement HTTP API Data Sending
Goal: Modify this BSSCI app to send data via HTTP POST requests instead of MQTT.

Target Service Center URL: https://your-service-center-repl-name.replit.app

Step 1: Create HTTP Client Function
Create a new file called http-client.js (or add to existing file):

// HTTP client for sending BSSCI data to service center
class ServiceCenterClient {
  constructor(baseUrl) {
    this.baseUrl = baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl;
  }
  // Send sensor uplink data
  async sendSensorUplink(sensorEui, bssciData) {
    try {
      const response = await fetch(`${this.baseUrl}/api/bssci/uplink/${sensorEui}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(bssciData)
      });
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${await response.text()}`);
      }
      const result = await response.json();
      console.log(`✅ Sent uplink for ${sensorEui}:`, result.message);
      return result;
    } catch (error) {
      console.error(`❌ Failed to send uplink for ${sensorEui}:`, error);
      throw error;
    }
  }
  // Send base station status
  async sendBaseStationStatus(baseStationEui, statusData) {
    try {
      const response = await fetch(`${this.baseUrl}/api/bssci/base-station-status/${baseStationEui}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(statusData)
      });
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${await response.text()}`);
      }
      const result = await response.json();
      console.log(`✅ Sent base station status for ${baseStationEui}:`, result.message);
      return result;
    } catch (error) {
      console.error(`❌ Failed to send base station status for ${baseStationEui}:`, error);
      throw error;
    }
  }
  // Send multiple messages at once (more efficient)
  async sendBatch(uplinks = [], baseStationStatuses = []) {
    try {
      const response = await fetch(`${this.baseUrl}/api/bssci/batch`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          uplinks,
          baseStationStatuses
        })
      });
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${await response.text()}`);
      }
      const result = await response.json();
      console.log(`✅ Sent batch data:`, result);
      return result;
    } catch (error) {
      console.error(`❌ Failed to send batch data:`, error);
      throw error;
    }
  }
}
// Export the client
export const serviceCenterClient = new ServiceCenterClient('https://your-service-center-repl-name.replit.app');
Step 2: Replace MQTT Publishing with HTTP Calls
Find where your app currently publishes MQTT messages. Replace those sections:

Instead of MQTT publish:

// OLD MQTT CODE - REMOVE THIS
mqtt.publish('bssci/ep/FCA84A030000127B/ul', JSON.stringify(uplinkData));
Use HTTP instead:

// NEW HTTP CODE - USE THIS
import { serviceCenterClient } from './http-client.js';
// Send individual sensor uplink
await serviceCenterClient.sendSensorUplink('FCA84A030000127B', {
  bs_eui: "70b3d59cd00009f6",
  rxTime: Date.now() * 1000000, // nanoseconds
  snr: 8.5,
  rssi: -75,
  cnt: 123,
  data: [0x01, 0x02, 0x03, 0x04]
});
Step 3: Data Format Examples
Sensor Uplink Data Format:

const uplinkData = {
  bs_eui: "70b3d59cd00009f6",     // Base station EUI
  rxTime: Date.now() * 1000000,   // Receive time in nanoseconds
  snr: 8.5,                       // Signal-to-noise ratio
  rssi: -75,                      // Signal strength
  cnt: 123,                       // Message counter
  data: [0x01, 0x02, 0x03, 0x04]  // Sensor payload as byte array
};
Base Station Status Format:

const statusData = {
  cpuLoad: 0.22,        // CPU load (0.0 to 1.0)
  memLoad: 0.39,        // Memory load (0.0 to 1.0)
  dutyCycle: 0.05,      // Duty cycle (0.0 to 1.0)
  uptime: "1699555s"    // Uptime string
};
Step 4: Batch Sending (Recommended for Multiple Messages)
If you're sending multiple messages, use batch sending:

// Collect multiple messages
const uplinks = [
  { sensorEui: "FCA84A030000127B", data: { bs_eui: "...", rxTime: ..., snr: 8.5, rssi: -75, cnt: 123, data: [...] } },
  { sensorEui: "FCA84A030000127D", data: { bs_eui: "...", rxTime: ..., snr: 9.0, rssi: -72, cnt: 124, data: [...] } }
];
const baseStationStatuses = [
  { baseStationEui: "70b3d59cd00009f6", data: { cpuLoad: 0.22, memLoad: 0.39, dutyCycle: 0.05, uptime: "1699555s" } }
];
// Send all at once
await serviceCenterClient.sendBatch(uplinks, baseStationStatuses);
Step 5: Error Handling
Add proper error handling:

try {
  await serviceCenterClient.sendSensorUplink(sensorEui, uplinkData);
} catch (error) {
  console.error('Failed to send data:', error);
  // Maybe retry or store for later sending
}
Step 6: Update Your App's Main Logic
Find where your app generates BSSCI data
Replace MQTT publish calls with HTTP calls using the examples above
Test by sending a message and checking the service center logs
Update the service center URL in the client to match your actual Repl URL
Step 7: Testing
Send a test message:

// Test with real sensor data
await serviceCenterClient.sendSensorUplink('FCA84A030000127B', {
  bs_eui: "70b3d59cd00009f6",
  rxTime: Date.now() * 1000000,
  snr: 8.5,
  rssi: -75,
  cnt: 123,
  data: [0x48, 0x65, 0x6c, 0x6c, 0x6f] // "Hello" in bytes
});
That's it! Your app will now send data via HTTP instead of MQTT. The service center will process it exactly the same way as MQTT messages.

Give this guide to the Replit assistant and tell them to replace the service center URL with your actual Repl URL.