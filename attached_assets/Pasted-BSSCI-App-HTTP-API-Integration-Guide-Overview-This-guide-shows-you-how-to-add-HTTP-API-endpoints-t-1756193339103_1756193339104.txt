BSSCI App HTTP API Integration Guide
Overview
This guide shows you how to add HTTP API endpoints to your BSSCI Python app to receive sensor data and registrations from the mioty service center.

Required Endpoints
1. Receive Sensor Import from Service Center
Endpoint: POST /api/sensors/import-from-service-center

from flask import Flask, request, jsonify
import logging
app = Flask(__name__)
@app.route('/api/sensors/import-from-service-center', methods=['POST'])
def import_sensors_from_service_center():
    """Receive sensors exported from mioty service center"""
    try:
        data = request.get_json()
        sensors = data.get('sensors', [])
        source = data.get('source', 'unknown')
        
        print(f"\nüîÑ ===== SENSOR IMPORT RECEIVED =====")
        print(f"   Source: {source}")
        print(f"   Sensors: {len(sensors)} to import")
        print(f"üîÑ ===================================\n")
        
        results = {'imported': [], 'errors': [], 'skipped': []}
        
        for sensor in sensors:
            try:
                eui = sensor.get('eui')
                name = sensor.get('name', f'Sensor-{eui[-4:]}')
                nw_key = sensor.get('nwKey', 'DEFAULT_KEY')
                short_addr = sensor.get('shortAddr', eui[-4:])
                
                # Check if sensor already exists in your system
                if sensor_exists_in_bssci(eui):
                    results['skipped'].append({
                        'eui': eui,
                        'name': name,
                        'reason': 'Already registered in BSSCI'
                    })
                    print(f"‚è≠Ô∏è  Skipping {eui} - already exists")
                    continue
                
                # Register sensor in your BSSCI system
                success = register_sensor_in_bssci_system(
                    eui=eui,
                    name=name,
                    network_key=nw_key,
                    short_address=short_addr,
                    description=sensor.get('description', 'Imported from service center')
                )
                
                if success:
                    results['imported'].append({
                        'eui': eui,
                        'name': name,
                        'status': 'registered'
                    })
                    print(f"‚úÖ Imported and registered {name} ({eui})")
                else:
                    results['errors'].append({
                        'sensor': sensor,
                        'error': 'Failed to register in BSSCI system'
                    })
                    print(f"‚ùå Failed to register {eui}")
                    
            except Exception as e:
                results['errors'].append({
                    'sensor': sensor,
                    'error': str(e)
                })
                print(f"‚ùå Error processing {sensor.get('eui', 'unknown')}: {e}")
        
        print(f"\nüìä Import Summary: {len(results['imported'])} imported, {len(results['skipped'])} skipped, {len(results['errors'])} errors\n")
        
        return jsonify({
            'success': True,
            'message': f"Processed {len(sensors)} sensors: {len(results['imported'])} imported, {len(results['skipped'])} skipped",
            'results': results
        })
        
    except Exception as e:
        print(f"‚ùå Import error: {e}")
        return jsonify({'error': str(e)}), 500
2. Receive Real-time Sensor Data
Endpoint: POST /api/bssci/uplink/<sensor_eui>

@app.route('/api/bssci/uplink/<sensor_eui>', methods=['POST'])
def receive_sensor_data(sensor_eui):
    """Receive real-time sensor data from service center"""
    try:
        uplink_data = request.get_json()
        
        print(f"\nüì° ===== SENSOR DATA RECEIVED =====")
        print(f"   Sensor: {sensor_eui}")
        print(f"   Base Station: {uplink_data.get('bs_eui', 'N/A')}")
        print(f"   RSSI: {uplink_data.get('rssi', 'N/A')} dBm")
        print(f"   SNR: {uplink_data.get('snr', 'N/A')} dB")
        print(f"   Data: {uplink_data.get('data', [])}")
        print(f"üì° =================================\n")
        
        # Validate BSSCI format
        required_fields = ['bs_eui', 'rxTime', 'snr', 'rssi', 'cnt', 'data']
        if not all(field in uplink_data for field in required_fields):
            return jsonify({'error': 'Invalid BSSCI uplink format'}), 400
        
        # Process the sensor data in your BSSCI system
        success = process_sensor_data_in_bssci(
            sensor_eui=sensor_eui,
            base_station_eui=uplink_data['bs_eui'],
            timestamp=uplink_data['rxTime'],
            rssi=uplink_data['rssi'],
            snr=uplink_data['snr'],
            counter=uplink_data['cnt'],
            payload=uplink_data['data']
        )
        
        if success:
            print(f"‚úÖ Processed data from {sensor_eui}")
            return jsonify({
                'status': 'success',
                'message': f'Data from {sensor_eui} processed successfully'
            })
        else:
            return jsonify({'error': 'Failed to process sensor data'}), 500
            
    except Exception as e:
        print(f"‚ùå Data processing error: {e}")
        return jsonify({'error': str(e)}), 500
3. Send Base Station Status
Send TO Service Center: POST /api/bssci/base-station-status/<base_station_eui>

import requests
import time
def send_base_station_status_to_service_center():
    """Send your base station status to the service center"""
    try:
        service_center_url = "https://your-service-center.replit.app"
        base_station_eui = "your-bssci-base-station-eui-here"
        
        # Collect your BSSCI base station metrics
        status_data = {
            "code": 0,  # 0 = OK, 1 = Error
            "cpuLoad": get_cpu_usage() / 100.0,  # Convert percentage to decimal
            "memLoad": get_memory_usage() / 100.0,  # Convert percentage to decimal  
            "dutyCycle": get_duty_cycle() / 100.0,  # Convert percentage to decimal
            "time": int(time.time()),  # Current Unix timestamp
            "uptime": int(get_system_uptime())  # Uptime in seconds
        }
        
        response = requests.post(
            f"{service_center_url}/api/bssci/base-station-status/{base_station_eui}",
            json=status_data,
            timeout=10
        )
        
        if response.status_code == 200:
            print(f"‚úÖ Base station status sent to service center")
            return True
        else:
            print(f"‚ùå Failed to send status: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error sending status: {e}")
        return False
# Call this function periodically (e.g., every 5 minutes)
def start_status_reporting():
    """Start periodic status reporting to service center"""
    import threading
    import time
    
    def report_status():
        while True:
            send_base_station_status_to_service_center()
            time.sleep(300)  # Send every 5 minutes
    
    status_thread = threading.Thread(target=report_status, daemon=True)
    status_thread.start()
    print("üîÑ Started periodic status reporting to service center")
Implementation Functions (You Need to Implement These)
def sensor_exists_in_bssci(eui):
    """Check if sensor already exists in your BSSCI system"""
    # TODO: Implement your sensor lookup logic
    # Example: return eui in your_sensor_database
    return False
def register_sensor_in_bssci_system(eui, name, network_key, short_address, description):
    """Register sensor in your BSSCI system"""
    try:
        # TODO: Implement your sensor registration logic
        # Example:
        # sensor_db.insert({
        #     'eui': eui,
        #     'name': name, 
        #     'network_key': network_key,
        #     'short_address': short_address,
        #     'description': description,
        #     'registered_at': datetime.now()
        # })
        print(f"üîß Registering sensor {eui} in BSSCI system...")
        return True
    except Exception as e:
        print(f"‚ùå Registration failed: {e}")
        return False
def process_sensor_data_in_bssci(sensor_eui, base_station_eui, timestamp, rssi, snr, counter, payload):
    """Process received sensor data in your BSSCI system"""
    try:
        # TODO: Implement your data processing logic
        # Example:
        # sensor_data_db.insert({
        #     'sensor_eui': sensor_eui,
        #     'base_station_eui': base_station_eui,
        #     'timestamp': timestamp,
        #     'rssi': rssi,
        #     'snr': snr,
        #     'counter': counter,
        #     'payload': payload,
        #     'received_at': datetime.now()
        # })
        print(f"üîß Processing data from {sensor_eui}: {len(payload)} bytes")
        return True
    except Exception as e:
        print(f"‚ùå Data processing failed: {e}")
        return False
def get_cpu_usage():
    """Get current CPU usage percentage"""
    # TODO: Implement CPU monitoring
    # Example: return psutil.cpu_percent()
    return 25.0  # Placeholder
def get_memory_usage():
    """Get current memory usage percentage"""  
    # TODO: Implement memory monitoring
    # Example: return psutil.virtual_memory().percent
    return 45.0  # Placeholder
def get_duty_cycle():
    """Get current duty cycle percentage"""
    # TODO: Implement duty cycle calculation
    return 0.5  # Placeholder
def get_system_uptime():
    """Get system uptime in seconds"""
    # TODO: Implement uptime calculation
    # Example: return time.time() - psutil.boot_time()
    return 86400  # Placeholder (1 day)
Complete Integration Example
from flask import Flask, request, jsonify
import requests
import threading
import time
app = Flask(__name__)
# Add all the endpoint functions above here...
if __name__ == '__main__':
    # Start periodic status reporting
    start_status_reporting()
    
    # Start Flask server
    print("üöÄ Starting BSSCI HTTP API server...")
    print("üì° Ready to receive sensor data and registrations")
    app.run(host='0.0.0.0', port=5000, debug=True)
Testing Your Integration
1. Test Sensor Import
curl -X POST https://your-service-center.replit.app/api/sensors/export-to-bssci \
  -H "Content-Type: application/json" \
  -d '{
    "bssci_app_url": "https://your-bssci-app.replit.app",
    "include_inactive": false
  }'
2. Test Data Reception
Send test data from service center to your BSSCI app:

curl -X POST https://your-bssci-app.replit.app/api/bssci/uplink/FCA84A030000127C \
  -H "Content-Type: application/json" \
  -d '{
    "bs_eui": "9c65f9fffe6be145",
    "rxTime": 1756190123456789000,
    "snr": 12.5,
    "rssi": -85,
    "cnt": 42,
    "data": [1, 2, 3, 4, 5]
  }'
Summary
After implementing these endpoints, your BSSCI app will be able to:

‚úÖ Receive sensor registrations from the service center
‚úÖ Get real-time sensor data via HTTP API
‚úÖ Send base station status back to service center
‚úÖ Handle errors gracefully with proper logging

The integration is complete when both apps can exchange data seamlessly using simple HTTP calls instead of complex MQTT! üöÄ